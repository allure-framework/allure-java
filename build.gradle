buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.2'
        classpath 'io.qameta.allure:allure-gradle:2.5'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE'
        classpath 'net.researchgate:gradle-release:2.7.0'
        classpath 'ru.vyarus:gradle-quality-plugin:3.0.0'
    }
}

ext {
    linkHomepage = 'https://qameta.io/allure'
    linkCi = 'https://ci.qameta.in/job/allure-java_deploy/'
    linkScmUrl = 'https://github.com/allure-framework/allure-java'
    linkScmConnection = 'scm:git:git://github.com/allure-framework/allure-java.git'
    linkScmDevConnection = 'scm:git:ssh://git@github.com:allure-framework/allure-java.git'

    gradleScriptDir = "${rootProject.projectDir}/gradle"
}

apply from: "${gradleScriptDir}/bintray.gradle"
apply from: "${gradleScriptDir}/release.gradle"

configure(rootProject) {
    description = "Allure Java"

    task build() {
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '4.8.1'
    }
}

subprojects { project ->
    group = 'io.qameta.allure'
    version = version

    apply plugin: 'java'
    apply plugin: 'io.qameta.allure'
    apply plugin: 'io.spring.dependency-management'

    apply from: "${gradleScriptDir}/maven-publish.gradle"

    compileJava.dependsOn(processResources)

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    dependencyManagement {
        dependencies {
            dependency 'com.codeborne:selenide:4.12.2'
            dependency 'com.github.tomakehurst:wiremock:2.18.0'
            dependency 'com.google.inject:guice:4.2.0'
            dependency 'com.google.testing.compile:compile-testing:0.15'
            dependency 'com.squareup.okhttp3:okhttp:3.10.0'
            dependency 'com.squareup.retrofit2:retrofit:2.4.0'
            dependency 'commons-io:commons-io:2.6'
            dependency 'io.qameta.allure:allure2-model-api:1.0.0'
            dependency 'io.rest-assured:rest-assured:3.1.0'
            dependency 'javax.servlet:javax.servlet-api:4.0.1'
            dependency 'junit:junit:4.12'
            dependency 'org.apache.commons:commons-lang3:3.7'
            dependency 'org.apache.httpcomponents:httpclient:4.5.6'
            dependency 'org.aspectj:aspectjrt:1.9.1'
            dependency 'org.aspectj:aspectjweaver:1.9.1'
            dependency 'org.assertj:assertj-core:3.10.0'
            dependency 'org.codehaus.groovy:groovy-all:2.5.0'
            dependency 'org.freemarker:freemarker:2.3.28'
            dependency 'org.hamcrest:hamcrest-library:1.3'
            dependency 'org.jbehave:jbehave-core:4.3.4'
            dependency 'org.jooq:joor-java-8:0.9.9'
            dependency 'org.junit.jupiter:junit-jupiter-api:5.2.0'
            dependency 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
            dependency 'org.junit.jupiter:junit-jupiter-params:5.2.0'
            dependency 'org.junit.platform:junit-platform-launcher:1.2.0'
            dependency 'org.mock-server:mockserver-netty:5.4.1'
            dependency 'org.mockito:mockito-core:2.19.0'
            dependency 'org.slf4j:slf4j-api:1.7.25'
            dependency 'org.slf4j:slf4j-simple:1.7.25'
            dependency 'org.spockframework:spock-core:1.1-groovy-2.4'
            dependency 'org.springframework.boot:spring-boot-autoconfigure:1.5.14.RELEASE'
            dependency 'org.springframework:spring-test:4.3.18.RELEASE'
            dependency 'org.springframework:spring-webmvc:4.3.18.RELEASE'
            dependency 'org.testng:testng:6.14.3'
            dependency 'net.javacrumbs.json-unit:json-unit:2.0.0.RC1'
        }
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourceJar
        archives javadocJar
    }

    repositories {
        jcenter()
        mavenLocal()
    }

    allure {
        version = '2.2.1'
        autoconfigure = false
        aspectjweaver = false
    }

    test {
        afterTest { descriptor, result ->
            logger.lifecycle("$descriptor finished with status $result")
        }
    }

    apply plugin: 'ru.vyarus.quality'
    quality {
        configDir = "$gradleScriptDir/quality-configs"
    }
}
